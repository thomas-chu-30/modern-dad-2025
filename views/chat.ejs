<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Audio Analyzer</title>
    <style>
      canvas {
        border: 1px solid #000;
        margin: 20px;
      }
      .controls {
        margin: 20px;
      }
    </style>
  </head>
  <body>
    <div class="controls">
      <input type="file" id="audioFile" accept="audio/*" />
      <button id="playButton">播放</button>
      <button id="stopButton">停止</button>
    </div>
    <canvas id="visualizer"></canvas>

    <script>
      let audioContext;
      let analyser;
      let source;
      let animationId;
      const canvas = document.getElementById("visualizer");
      const ctx = canvas.getContext("2d");
      const playButton = document.getElementById("playButton");
      const stopButton = document.getElementById("stopButton");
      const audioFile = document.getElementById("audioFile");

      // 設置 canvas 大小
      canvas.width = 800;
      canvas.height = 200;

      // 初始化音頻上下文和分析器
      function initAudio() {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        analyser = audioContext.createAnalyser();
        analyser.fftSize = 2048;
      }

      // 播放音頻文件
      async function playAudio(file) {
        if (!audioContext) {
          initAudio();
        }

        const arrayBuffer = await file.arrayBuffer();
        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);

        if (source) {
          source.disconnect();
        }

        source = audioContext.createBufferSource();
        source.buffer = audioBuffer;
        source.connect(analyser);
        analyser.connect(audioContext.destination);
        source.start(0);

        visualize();
      }

      // 視覺化音頻
      function visualize() {
        const bufferLength = analyser.frequencyBinCount;
        const dataArray = new Uint8Array(bufferLength);

        function draw() {
          animationId = requestAnimationFrame(draw);
          analyser.getByteFrequencyData(dataArray);

          ctx.fillStyle = "rgb(200, 200, 200)";
          ctx.fillRect(0, 0, canvas.width, canvas.height);

          const barWidth = (canvas.width / bufferLength) * 2.5;
          let barHeight;
          let x = 0;

          for (let i = 0; i < bufferLength; i++) {
            barHeight = dataArray[i] / 2;

            ctx.fillStyle = `rgb(50, ${barHeight + 100}, 50)`;
            ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);

            x += barWidth + 1;
          }
        }

        draw();
      }

      // 事件監聽器
      audioFile.addEventListener("change", (e) => {
        const file = e.target.files[0];
        if (file) {
          playButton.onclick = () => playAudio(file);
        }
      });

      stopButton.addEventListener("click", () => {
        if (source) {
          source.stop();
          cancelAnimationFrame(animationId);
          ctx.clearRect(0, 0, canvas.width, canvas.height);
        }
      });
    </script>
  </body>
</html>
